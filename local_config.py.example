# coding: utf-8
# vi: ft=python

DEBUG = DEVELOP_MODE = True

SENTRY_DSN = ''

SESSION_SECRET_KEY = 'NVzLYJSMyw'

SESSION_TTL = 24 * 3600

TRUSTED_HOSTS = ['127.0.0.1', '10.0.0.1', 'localhost']
ALLOW_ORIGINS = ['https://example.org', 'https://www.example.org']  # use ['*'] to allow any origin.
ALLOW_ORIGINS_REG = r"https://.*\.example\.org"  # See https://www.starlette.io/middleware/#corsmiddleware for ref

SYSTEM_USER = 'admin'
SYSTEM_USER_PASSWORD = 'admin'

ADMIN_ROLES = ['admin', 'system_admin']

PARAM_FILLUP = {
    # 'reason': 'hehe',
    'ldap_id': lambda user: user.name,
}

# DATABASE_URL = 'sqlite:///tmp/helpdesk.db'
#   postgres://user:pass@localhost/dbname
#   mysql://user:pass@localhost/dbname

ENABLED_PROVIDERS = ('airflow',)

AIRFLOW_SERVER_URL = 'https://airflow.internal'
AIRFLOW_USERNAME = "helpdesk"
AIRFLOW_PASSWORD = "changeme"
AIRFLOW_DEFAULT_DAG_TAG = 'helpdesk'
AIRFLOW_JWT_EXPIRATION_SECONDS = 86400 # ref config AIRFLOW__API_AUTH__JWT_EXPIRATION_TIME

OPENID_PRIVIDERS = {
    'keycloak': {
        'server_metadata_url': 'https://keycloak.example.com/realms/apps/.well-known/openid-configuration',
        'client_id': 'helpdesk',
        'client_secret': 'CLIENT_SECRET',
        'scope': 'openid email profile',
    },
    'google': {
        'server_metadata_url': 'https://accounts.google.com/.well-known/openid-configuration',
        'client_id': 'CLIENT_ID',
        'client_secret': 'CLIENT_SECRET',
        'scope': 'openid email profile',
        'client_kwargs': {
            'proxies': {'all': 'http://localhost:3128'},
        },
    }
}
AUTHORIZED_EMAIL_DOMAINS = ['@example.com']


def oauth_username_func(id_token):
    return id_token.get('preferred_username') or id_token['email'].split('@')[0]


# base url will be used by notifications to show web links
DEFAULT_BASE_URL = 'https://example.com'
ADMIN_EMAIL_ADDRS = 'admin@example.com,ops@example.com'
FROM_EMAIL_ADDR = 'helpdesk@example.com'

NOTIFICATION_TITLE_PREFIX = '[helpdesk] '
NOTIFICATION_METHODS = [
    'helpdesk.libs.notification:MailNotification',
    'helpdesk.libs.notification:WebhookNotification',
]

AUTO_APPROVAL_TARGET_OBJECTS = []

TICKETS_PER_PAGE = 50


def avatar_url_func(email):
    import hashlib
    GRAVATAR_URL = '//www.gravatar.com/avatar/%s'
    return GRAVATAR_URL % hashlib.md5(email.encode('utf-8').lower()).hexdigest()


# Action Tree Config
# action name, description/tips, st2 pack/action

example1_subtree = [
    'subtree example1 name',
    [
        ['Ticket Pack name', 'Ticket Group description', 'pack.'],
        ['Ticket name', 'Ticket description', ''],
    ]
]

example2_subtree = [
    'subtree example2 name',
    [
        ['Ticket Pack name', 'Ticket Group description', 'pack.'],
        ['Ticket name', 'Ticket description', ''],
    ]
]

ACTION_TREE_CONFIG = ['Title of tickets tree', [example1_subtree, example2_subtree]]
